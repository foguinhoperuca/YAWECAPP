{"name":"Yawecapp","tagline":"Yet Another WEb Client APP","body":"YAWECAPP\r\n========\r\n\r\nYet Another WEb Client APP is a sample app for start new project with  jquery + underscore + backbone + bootstrap + markup.\r\nWill work with awknet-commons (java backend)\r\n\r\nDeveloper: Jefferson Campos - @foguinhoperuca\r\n\r\nPrevious Work\r\n=============\r\n\r\nThis work is basead on JUMBABOOM (Jquery + UNderscore + BAckbone + BOOtstrap + Markup = JUNBABOOM! ), developed by @victorwpbastos.\r\n\r\nLicense\r\n=======\r\n\r\nAll this work is  basead in GNU GPLv3. See license file for more informartion.\r\n\r\nFolders Layout\r\n==============\r\n\r\nAll files of app are in app folder.\r\n\r\n\trepos root\r\n\t|\r\n\t|-- app/ - all app files are here.\r\n\t|---- css - css files. No big deal;\r\n\t|---- data - .json files that is used as test for model/collection communication with backend;\r\n\t|---- img - all image files. No big deal;\r\n\t|---- js - the heart of app. All scripts are here;\r\n\t|------ collections - contain all BackboneJS collections;\r\n\t|------ controllers - contain all BackboneJS routers. They act like as \"controller\" in MVC model;\r\n\t|------ libs - all static libs of third-party;\r\n\t|------ models - contain all backbone models;\r\n\t|------ views - contain all BackboneJS and MarionetteJS views;\r\n\t|------ app.js - main file of app. Act as main function in C, Java, etc;\r\n\t|------ config.js - contain all configuration of app (backend url, etc);\r\n\t|------ main.js - used by RequireJS to start app. Contain the first method called by require, instanciate all routers and start BackboneJS;\r\n\t|---- templates - all html snippets live here. The template engine use theses files;\r\n\t|-- index.html - main html file of app. All files will be rendered here;\r\n\t|-- package.json - bower (future);\r\n\t|-- todo.org - all tasks to work;\r\n\r\nRequireJS\r\n=========\r\n\r\nRequireJS use main.js file to configure all libs that will be used in app and a special method to start app. All js file need use\r\n\r\n\tdefine([\r\n\t\t'marionette'\r\n\t\t, 'app'\r\n\t\t, 'text!../../templates/about.tpl'\r\n\t\t], function (Marionette, App, Template)  {\r\n\r\n(Of course, replace libs for appropriate ones)\r\n\r\nAnd that's it. Simple to use it. ;)\r\n\r\n\r\nMarionetteJS\r\n============\r\n\r\nItemView\r\n--------\r\n\r\nNo special problem.\r\n\r\nCompositeView\r\n-------------\r\n\r\nThe greatest problem with CompotiseView was integrate it with ItemView. The rewrite was necessary  (see app.js):\r\n\r\n\tMarionette.Renderer.render = function(template, data) { ... };\r\n\r\nThe technique using:\r\n\r\n\t$(this.el).html(page);\r\n\r\nis obsolete, right now.\r\n\r\nThe MarionetteJS use templates of RequireJS. The template must be \"compiled\" in JS and UnderscoreJS act as template engine.\r\nBy the way, if you use a template in pure html and without spaces or tabs it can be compiled by MarionetteJS (underscore). Of course, there is a price: the snippet hasn't any indentation.\r\n\r\nCollectionView\r\n--------------\r\n\r\nSame as CompositeView. Do not need implement it!\r\n\r\nHandlebars\r\n==========\r\n\r\nRewrite the function Marionette.Renderer.render to:\r\n\r\n```\r\nMarionette.Renderer.render = function(template, data) {\r\n\tvar compiled = Handlebars.compile(template);\r\n\treturn compiled(data);\r\n};\r\n```\r\n\r\nHandlebars need compile the template and then insert the data.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}