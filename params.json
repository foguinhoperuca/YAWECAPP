{"name":"Yawecapp","tagline":"Yet Another WEb Client APP","body":"# YAWECAPP\r\n\r\n> Yet Another WEb Client APP is a sample app for start new project with  jquery + underscore + backbone + bootstrap + handlebars. Will work with awknet-commons (java backend). You can create it using [grunt-init][].\r\n\r\n[grunt-init]: http://gruntjs.com/project-scaffolding\r\n\r\n## Installation\r\nIf you haven't already done so, install [grunt-init][].\r\n\r\nOnce grunt-init is installed, place this template in your `~/.grunt-init/` directory. It's recommended that you use git to clone this template into that directory, as follows:\r\n\r\n```\r\ngit clone git@github.com:gruntjs/grunt-init-yawecapp.git ~/.grunt-init/yawecapp\r\n```\r\n\r\n_(Windows users, see [the documentation][grunt-init] for the correct destination directory path)_\r\n\r\n## Usage\r\n\r\nAt the command-line, cd into an empty directory, run this command and follow the prompts.\r\n\r\n```\r\ngrunt-init yawecapp\r\n```\r\n\r\n_Note that this template will generate files in the current directory, so be sure to change to a new directory first if you don't want to overwrite existing files._\r\n\r\n## Folders Layout\r\n\r\n* The main folder is called root: there is a template for app;\r\n* The folder web-server have a template for configuration's files of web-server. You will need manually copy it and change all values. Follow the comments in file.\r\n* There is one exemple of grunt's default file that is living in root of repos (it is called grunt-defaults-exemple.json). It should be renamed to defaults.json and saved in ~/.grunt-init/ folder;\r\n\r\n### App Files.\r\n\r\nAll files for development are in app folder, except for index.html. All other files are for configuration of development environment and so on.\r\n\r\n\troot\r\n\t|\r\n\t|-- app/ - all app files are here.\r\n\t|---- css - css files. No big deal;\r\n\t|---- data - .json files that is used as test for model/collection communication with backend;\r\n\t|---- img - all image files. No big deal;\r\n\t|---- js - the heart of app. All scripts are here;\r\n\t|------ collections - contain all BackboneJS collections;\r\n\t|------ controllers - contain all BackboneJS routers. They act like as \"controller\" in MVC model;\r\n\t|------ libs - all static libs of third-party;\r\n\t|-------- bower - all libs downloaded with bower will live here;\r\n\t|-------- vendor - using libs downloaded manually;\r\n\t|------ models - contain all backbone models;\r\n\t|------ views - contain all BackboneJS and MarionetteJS views;\r\n\t|------ app.js - main file of app. Act as main function in C, Java, etc;\r\n\t|------ config.js - contain all configuration of app (backend url, etc);\r\n\t|------ main.js - used by RequireJS to start app. Contain the first method called by require, instanciate all routers and start BackboneJS;\r\n\t|---- templates - all html snippets live here. The template engine use theses files;\r\n\t|---- test - all tests;\r\n\t|-- .bowerrc - bower configuration's file;\r\n\t|-- .gitignore - gitignore for app, not repos;\r\n\t|-- .jshintrc - configuration's file for jslint;\r\n\t|-- bower - bower configuration's file. Grunt's scaffolder process is a dependency for this file;\r\n\t|-- Gruntfile - grunt template file for tasks;\r\n\t|-- index.html - main html file of app. All files will be rendered here;\r\n\t|-- LICENSE - default license for project (MIT);\r\n\t|-- README.md - default README file for app. Grunt's scaffolder process is a dependency for this file;\r\n\t|-- todo.org - all tasks to work in app. It's different from todo.org of this repos;\r\n\r\n## Libraries\r\n\r\n### RequireJS\r\n\r\nRequireJS use main.js file to configure all libs that will be used in app and a special method to start app. All js file need use\r\n\r\n\tdefine([\r\n\t\t'marionette'\r\n\t\t, 'app'\r\n\t\t, 'text!../../templates/about.tpl'\r\n\t\t], function (Marionette, App, Template)  {\r\n\r\n(Of course, replace libs for appropriate ones)\r\n\r\nAnd that's it. Simple to use it. ;)\r\n\r\n### MarionetteJS\r\n\r\n#### ItemView\r\n\r\nNo special problem.\r\n\r\n#### CompositeView\r\n\r\nThe greatest problem with CompotiseView was integrate it with ItemView. The rewrite was necessary  (see app.js):\r\n\r\n\tMarionette.Renderer.render = function(template, data) { ... };\r\n\r\nThe technique using:\r\n\r\n\t$(this.el).html(page);\r\n\r\nis obsolete, right now.\r\n\r\nThe MarionetteJS use templates of RequireJS. The template must be \"compiled\" in JS and UnderscoreJS act as template engine.\r\nBy the way, if you use a template in pure html and without spaces or tabs it can be compiled by MarionetteJS (underscore). Of course, there is a price: the snippet hasn't any indentation.\r\n\r\n#### CollectionView\r\n\r\nSame as CompositeView. Do not need implement it!\r\n\r\n# Credits\r\n\r\nCopyright (c) 2013 Jefferson Campos - @foguinhoperuca. Licensed under the GPLv3 license.\r\nYAWECAPP is basead on JUMBABOOM (Jquery + UNderscore + BAckbone + BOOtstrap + Markup = JUNBABOOM! ), developed by @victorwpbastos (there is some changes in libraries used, like Handlebarsjs instead Markupjs).\r\nBasead in project grunt-commonjs (https://npmjs.org/package/grunt-commonjs).\r\n\r\n# License\r\n\r\nAll this work use MIT license. See License file for more informartion.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}